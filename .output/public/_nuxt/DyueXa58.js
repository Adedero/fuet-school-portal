import{z as e}from"./CQ9DD0Tp.js";const s=(n,o=2)=>{if(n===0)return"0 Bytes";const t=1024,i=o<0?0:o,a=["Bytes","KB","MB","GB","TB","PB","EB","ZB","YB"],r=Math.floor(Math.log(n)/Math.log(t));return Number.parseFloat((n/Math.pow(t,r)).toFixed(i))+" "+a[r]},m=e.object({search:e.string("Invalid search value"),limit:e.coerce.number("Limit query must be a number").positive("Limit query must be a positive number"),offset:e.coerce.number("Limit query must be a number").nonnegative("Offset query must be a 0 or greater")}),d=e.object({firstName:e.string("Invalid first name").nonempty("First name cannot be empty").trim(),middleName:e.string("Invalid middlename").trim().optional(),otherNames:e.string("Invalid names").trim().optional(),lastName:e.string("Invalid last name").nonempty("Last name cannot be empty").trim(),phoneNumber:e.string("Invalid phone number").nonempty("Phone number cannot be empty").trim(),birthDay:e.number("Invalid day of birth"),birthMonth:e.string("Invalid month of birth").trim(),birthYear:e.number("Invalid year of birth"),gender:e.enum(["male","female"],"Gender must be male or female"),nationality:e.string("Invalid nationality").trim(),stateOfOrigin:e.string("Invalid state of origin").trim().nonempty("State of origin cannot be empty"),lga:e.string("Invalid local government area or town").trim().nonempty("Local government area or town cannot be empty"),nin:e.string("Invalid ID nunmmber").trim().nonempty("NIN/ID number cannot be empty")}),l=e.object({firstParentName:e.string().nonempty("Full name of first parent is required"),firstParentAddress:e.string().nonempty("Address of first parent is required"),firstParentStatus:e.enum(["living","deceased"]),secondParentName:e.string().nonempty("Full name of second parent is required"),secondParentAddress:e.string().nonempty("Address of second parent is required"),secondParentStatus:e.enum(["living","deceased"]),nextOfKinName:e.string().nonempty("Full name of next of kin is required"),nextOfKinAddress:e.string().nonempty("Address of next of kin is required"),nextOfKinRelationship:e.string().nonempty("Relationship with next of kin is required"),nextOfKinPhoneNumber:e.string().nonempty("Phone number of next of kin is required")}),p=e.object({course:e.string().nonempty("Course is required"),degreeType:e.string().nonempty("Degree type is required"),jambRegNumber:e.string().nonempty("JAMB registration number is required"),secondarySchoolName:e.string().nonempty("Secondary school name is required"),secondarySchoolAddress:e.string().nonempty("Secondary school address is required"),secondarySchoolGraduationMonth:e.string().nonempty("Secondary school graduation month is required"),secondarySchoolGraduationYear:e.int("Secondary school graduation year is required").refine(n=>n.toString().split("").length>=4,"Invalid graduation year")}),c=e.object({passportUrl:e.string("No passport photograph uploaded").nonempty("No passport photograph uploaded"),birthCertificateUrl:e.string("No birth certificate uploaded").nonempty("No birth certificate uploaded"),stateOfOriginUrl:e.string("No state of origin document uploaded").nonempty("No state of origin document uploaded"),oLevelResultUrl:e.string("No O'Level result uploaded").nonempty("No O'Level result uploaded"),postUTMESlipUrl:e.string("No post UTME slip uploaded").nonempty("No post UTME slip uploaded"),admissionFormPaymentReceiptUrl:e.string("No admission form payment slip uploaded").nonempty("No admission form payment slip uploaded")}),g=({maxFileSize:n,acceptedFileTypes:o})=>e.object({documentType:e.object({label:e.string(),value:e.string()},"Document type is required"),file:e.instanceof(File,{message:"Please select a file to upload."}).refine(t=>t.size<=n,{message:`The file is too large. Please choose an file smaller than ${s(n)}.`}).refine(t=>o.includes(t.type),{message:"Please upload a valid file (PDF, JPEG, PNG, or WebP)."})}),y=e.object({...d.shape,...l.shape,...p.shape,...c.shape});e.object({schoolSessionName:e.string().nonempty(),admissionStatus:e.enum(["submitted","accepted","rejected"]),hasPaidAdmissionFee:e.coerce.boolean(),orderBy:e.union([e.array(e.string()),e.string()]),...m.shape});export{y as a,l as b,p as c,g as d,s as f,d as p};
